#summary Basic Usage of AMOP

= Introduction =

By using ABI and template techniques, make AMOP different from other C++ Mock Object library.
Here is the basic usage for this library. And please read the Unit-Test in the source for more details.

= Details =

{{{
#include <UnitTest++.h>
#include "../MockObject.h"
#include <string>

using namespace amop;

//------------------------------------------------------------------
class IInterface
{
public:
	virtual ~IInterface(){}

	virtual void SimpleFunction() = 0;
	virtual void SimpleFunctionWithParams(float, std::string, const char*) = 0;
	
	virtual void SimpleFunctionWithAlotParams(float, int, float, int, std::string) = 0;

	virtual int SimpleFunctionWithReturn() = 0;
	virtual int& SimpleFunctionWithRefReturn() = 0;

	virtual void SimpleConstFunction() const = 0;

	virtual std::string ComplexFunction(const std::string& crs,
		std::string& rs, std::string s) = 0;

	virtual std::string ComplexConstFunction(const std::string& crs,
		std::string& rs, std::string s) const = 0;
};

//------------------------------------------------------------------
TEST(MockObjectNotImplementedThrowSimpleFunction)
{
	TMockObject<IInterface> mock;

	CHECK((IInterface*)mock);

	bool isThrow = false;
	try
	{
		((IInterface*)mock)->SimpleFunction();
	}
	catch(const TNotImplementedException&)
	{
		isThrow = true;
	}

	CHECK(isThrow);
}

//------------------------------------------------------------------
TEST(MockObjectMethodSimple)
{
	TMockObject<IInterface> mock;

	mock.Method(&IInterface::SimpleFunction);
	mock.Method(&IInterface::SimpleFunctionWithAlotParams);

	((IInterface*)mock)->SimpleFunction();
	((IInterface*)mock)->SimpleFunctionWithAlotParams(0, 0, 0, 0, std::string());
}

//------------------------------------------------------------------
TEST(MockObjectMethodComplex)
{
	TMockObject<IInterface> mock;

	mock.Method(&IInterface::ComplexFunction)
		.Will("Test Result");
	std::string crs, rs, s;
	
	std::string result = 
		((IInterface*)mock)->ComplexFunction(crs, rs, s);

	CHECK_EQUAL("Test Result", result.c_str());
}

//------------------------------------------------------------------
TEST(MockObjectMethodSimpleWithReturn)
{
	TMockObject<IInterface> mock;

	mock.Method(&IInterface::SimpleFunctionWithReturn)
		.Will(22);
	mock.Method(&IInterface::SimpleFunctionWithRefReturn)
		.Will(1262);

	CHECK_EQUAL(22, ((IInterface*)mock)->SimpleFunctionWithReturn());
	CHECK_EQUAL(1262, ((IInterface*)mock)->SimpleFunctionWithRefReturn());
}


}}}